#version 460

#include "core/struct.glsl"

layout(local_size_x = 32) in;

layout(set = 0, binding = 0) uniform readonly GlobalUniform {
  vec3 origin;
  vec3 horizontal;
  vec3 vertical;
  vec3 lowerLeftCorner;
  uvec2 imgSize;
  uint numLights;
  SunLight sunLight;
  vec3 skyColor;
} ubo;

layout(set = 0, binding = 1) buffer writeonly ObjectRayBuffer {
  RayData rayDatas[];
} objectRayBuffer;

layout(set = 0, binding = 2) buffer writeonly LightRayBuffer {
  RayData rayDatas[];
} lightRayBuffer;

layout(set = 0, binding = 3) buffer readonly SamplerDataBuffer {
  IndirectSamplerData samplerDatas[];
} samplerDataBuffer;

layout(push_constant) uniform Push {
  uint randomSeed;
} push;

void main() {
  IndirectSamplerData samplerData = samplerDataBuffer.samplerDatas[gl_GlobalInvocationID.x];
  RayData rayData;

  vec2 uv = vec2(samplerData.xCoord, samplerData.yCoord) / ubo.imgSize;
  vec3 rayDirection = ubo.lowerLeftCorner + uv.x * ubo.horizontal - uv.y * ubo.vertical - ubo.origin;

  bool isPrimaryRay = samplerData.rayBounce == 0u;
  rayData.ray.origin = isPrimaryRay ? ubo.origin : samplerData.nextRay.origin;
  rayData.ray.direction = isPrimaryRay ? rayDirection : samplerData.nextRay.direction;

  rayData.dirMin = 0.01f;
  rayData.dirMax = vec3(1000000000000.0f);
  rayData.rayBounce = samplerData.rayBounce;

  objectRayBuffer.rayDatas[gl_GlobalInvocationID.x] = rayData;
  lightRayBuffer.rayDatas[gl_GlobalInvocationID.x] = rayData;
}



