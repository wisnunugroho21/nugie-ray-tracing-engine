#version 460

#include "core/struct.glsl"
layout(local_size_x = 32) in;

layout(set = 0, binding = 0) buffer writeonly LightShadeBuffer {
  LightShadeRecord records[];
} lightShadeBuffer;

layout(set = 0, binding = 1) buffer readonly ObjectHitBuffer {
  HitRecord records[];
} objectHitBuffer;

layout(set = 0, binding = 2) buffer readonly LightHitBuffer {
  HitRecord records[];
} lightHitBuffer;

layout(set = 0, binding = 3) buffer readonly LightModel {
  TriangleLight lights[];
};

layout(set = 0, binding = 4) buffer readonly VertexModel {
  Vertex vertices[];
};


// ------------- Triangle -------------

float triangleArea(uvec3 triIndices) {
  vec3 v0v1 = vertices[triIndices.y].position - vertices[triIndices.x].position;
  vec3 v0v2 = vertices[triIndices.z].position - vertices[triIndices.x].position;

  vec3 pvec = cross(v0v1, v0v2);
  return 0.5 * sqrt(dot(pvec, pvec)); 
}

// ------------- Integrand ------------- 

float Gfactor(float NloL, float squareDistance, float area) {
  return NloL * area / squareDistance;
}

float GfactorTriangleLight(HitRecord hittedLight) {
  float sqrDistance = dot(hittedLight.dir, hittedLight.dir);
  float NloL = max(dot(hittedLight.normal, -1.0f * normalize(hittedLight.dir)), 0.001f);
  float area = triangleArea(lights[hittedLight.hitIndex].indices);

  return Gfactor(NloL, sqrDistance, area);
}

void main() {
  HitRecord objectHit = objectHitBuffer.records[gl_GlobalInvocationID.x];
  HitRecord lightHit = lightHitBuffer.records[gl_GlobalInvocationID.x];

  bool isHitLight = lightHit.isHit && (!objectHit.isHit || length(lightHit.dir) <= length(objectHit.dir));

  LightShadeRecord lightShadeRecord;
  lightShadeRecord.isIlluminate = isHitLight;
  lightShadeRecord.radiance = vec3(0.0f);
  lightShadeRecord.rayBounce = objectHit.rayBounce;

  if (lightShadeRecord.isIlluminate) {
    lightShadeRecord.radiance = objectHit.rayBounce >= 1u ? GfactorTriangleLight(lightHit) * lights[lightHit.hitIndex].color : lights[lightHit.hitIndex].color;
  }

  lightShadeBuffer.records[gl_GlobalInvocationID.x] = lightShadeRecord;
}