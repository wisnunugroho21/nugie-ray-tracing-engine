#version 460

#include "core/struct.glsl"
#include "core/boolean.glsl"

layout(local_size_x = 32) in;

layout(set = 0, binding = 0, rgba8) uniform image2D totalIndirectImage;

layout(set = 0, binding = 1) buffer SamplerDataUbo {
  SamplerData samplerDatas[];
} samplerDataUbo;

layout(set = 0, binding = 2) buffer readonly MissUbo {
  MissRecord records[];
} missUbo;

layout(set = 0, binding = 3) buffer readonly LightShadeUbo {
  LightShadeRecord records[];
} lightShadeUbo;

layout(set = 0, binding = 4) buffer readonly IndirectUbo {
  IndirectShadeRecord records[];
} indirectUbo;

void main() {
  SamplerData samplerData = samplerDataUbo.samplerDatas[gl_GlobalInvocationID.x];
  ivec2 pixelCoord = ivec2(samplerData.xCoord, samplerData.yCoord);

  IndirectShadeRecord indirectRecord = indirectUbo.records[gl_GlobalInvocationID.x];
  LightShadeRecord lightShadeRecord = lightShadeUbo.records[gl_GlobalInvocationID.x];
  MissRecord missRecord = missUbo.records[gl_GlobalInvocationID.x];

  vec4 prevIndirectData = imageLoad(totalIndirectImage, pixelCoord);
  vec3 prevIndirectAttent = mix(prevIndirectData.xyz, vec3(1.0f), lightShadeRecord.isPrimary);
  float prevIndirectPdf = mix(prevIndirectData.w, 1.0f, lightShadeRecord.isPrimary);

  vec3 totalPrevIndirect = prevIndirectAttent / prevIndirectPdf;
  
  vec3 curIndirect = (missRecord.radiance + indirectRecord.radiance) * totalPrevIndirect + 
    lightShadeRecord.radiance * prevIndirectAttent;

  imageStore(totalIndirectImage, pixelCoord, vec4(curIndirect, indirectRecord.pdf));

  samplerDataUbo.samplerDatas[gl_GlobalInvocationID.x].nextRay = indirectRecord.nextRay;
  samplerDataUbo.samplerDatas[gl_GlobalInvocationID.x].nextRay.direction *= when_gt(length(indirectRecord.radiance), 0.001f);
}