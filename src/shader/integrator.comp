#version 460

#include "core/struct.glsl"
#include "core/boolean.glsl"

layout(local_size_x = 32) in;

layout(set = 0, binding = 0, rgba8) uniform image2D totalRadianceImage;

layout(set = 0, binding = 1) buffer SamplerDataUbo {
  SamplerData datas[];
} samplerDataUbo;

layout(set = 0, binding = 2) buffer IndirectDataUbo {
  IndirectData datas[];
} indirectDataUbo;

layout(set = 0, binding = 3) buffer readonly MissUbo {
  MissRecord records[];
} missUbo;

layout(set = 0, binding = 4) buffer readonly LightShadeUbo {
  LightShadeRecord records[];
} lightShadeUbo;

layout(set = 0, binding = 5) buffer readonly IndirectShadeUbo {
  IndirectShadeRecord records[];
} indirectShadeUbo;

void main() {
  SamplerData samplerData = samplerDataUbo.datas[gl_GlobalInvocationID.x];
  ivec2 pixelCoord = ivec2(samplerData.xCoord, samplerData.yCoord);

  IndirectShadeRecord indirectRecord = indirectShadeUbo.records[gl_GlobalInvocationID.x];
  LightShadeRecord lightShadeRecord = lightShadeUbo.records[gl_GlobalInvocationID.x];
  MissRecord missRecord = missUbo.records[gl_GlobalInvocationID.x];

  IndirectData prevIndirectData = indirectDataUbo.datas[gl_GlobalInvocationID.x];
  vec3 totalPrevIndirect = prevIndirectData.attenuation / prevIndirectData.pdf;
  
  vec3 curRadiance = missRecord.radiance * totalPrevIndirect + lightShadeRecord.radiance * prevIndirectData.attenuation;
  imageStore(totalRadianceImage, pixelCoord, vec4(curRadiance, 1.0f));

  indirectDataUbo.datas[gl_GlobalInvocationID.x].attenuation = totalPrevIndirect * indirectRecord.radiance;
  indirectDataUbo.datas[gl_GlobalInvocationID.x].pdf = indirectRecord.pdf;

  indirectRecord.nextRay.direction *= when_gt(length(indirectRecord.radiance), 0.001f);
  samplerDataUbo.datas[gl_GlobalInvocationID.x].nextRay = indirectRecord.nextRay;
}