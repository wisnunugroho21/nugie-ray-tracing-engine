#version 460

#include "core/struct.glsl"
#include "core/boolean.glsl"

layout(local_size_x = 32) in;

layout(set = 0, binding = 0, rgba8) uniform image2D totalRadianceImage;

layout(set = 0, binding = 1) buffer IndirectSamplerDataUbo {
  IndirectSamplerData datas[];
} indirectSamplerDataUbo;

layout(set = 0, binding = 2) buffer TotalIndirectDataUbo {
  TotalIndirectData datas[];
} indirectDataUbo;

layout(set = 0, binding = 3) buffer readonly MissUbo {
  MissRecord records[];
} missUbo;

layout(set = 0, binding = 4) buffer readonly LightShadeUbo {
  LightShadeRecord records[];
} lightShadeUbo;

layout(set = 0, binding = 5) buffer readonly IndirectShadeUbo {
  IndirectShadeRecord records[];
} indirectShadeUbo;

layout(set = 0, binding = 6) buffer readonly DirectShadeUbo {
  DirectShadeRecord records[];
} directShadeUbo;

void main() {
  IndirectSamplerData samplerData = indirectSamplerDataUbo.datas[gl_GlobalInvocationID.x];
  ivec2 pixelCoord = ivec2(samplerData.xCoord, samplerData.yCoord);

  DirectShadeRecord directRecord = directShadeUbo.records[gl_GlobalInvocationID.x];
  IndirectShadeRecord indirectRecord = indirectShadeUbo.records[gl_GlobalInvocationID.x];
  LightShadeRecord lightShadeRecord = lightShadeUbo.records[gl_GlobalInvocationID.x];
  MissRecord missRecord = missUbo.records[gl_GlobalInvocationID.x];

  TotalIndirectData prevIndirectData = indirectDataUbo.datas[gl_GlobalInvocationID.x];
  vec3 prevIndirectAttenuation = mix(prevIndirectData.attenuation, vec3(1.0f), lightShadeRecord.isPrimary);
  float prevIndirectPdf = mix(prevIndirectData.pdf, 1.0f, lightShadeRecord.isPrimary);

  vec3 totalRadiance = imageLoad(totalRadianceImage, pixelCoord).xyz;
  totalRadiance = mix(totalRadiance, vec3(0.0f), lightShadeRecord.isPrimary);

  vec3 totalPrevIndirect = prevIndirectAttenuation / prevIndirectPdf;

  float totalPdf = indirectRecord.pdf + directRecord.pdf;
  vec3 directRadiance = directRecord.radiance * directRecord.pdf / totalPdf;
  vec3 indirectRadiance = indirectRecord.radiance * indirectRecord.pdf / totalPdf;
  
  vec3 curRadiance =  lightShadeRecord.radiance * prevIndirectAttenuation + 
    (missRecord.radiance + directRadiance) * totalPrevIndirect;

  imageStore(totalRadianceImage, pixelCoord, vec4(totalRadiance + curRadiance, 1.0f));

  indirectDataUbo.datas[gl_GlobalInvocationID.x].attenuation = totalPrevIndirect * indirectRadiance;
  indirectDataUbo.datas[gl_GlobalInvocationID.x].pdf = prevIndirectPdf;

  indirectRecord.nextRay.direction *= when_gt(length(indirectRecord.radiance), 0.001f);
  indirectSamplerDataUbo.datas[gl_GlobalInvocationID.x].nextRay = indirectRecord.nextRay;
}