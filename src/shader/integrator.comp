#version 460

#include "core/struct.glsl"
#include "core/boolean.glsl"

layout(local_size_x = 32) in;

layout(set = 0, binding = 0, rgba8) uniform image2D totalRadianceImage;

layout(set = 0, binding = 1) buffer IndirectSamplerDataUbo {
  IndirectSamplerData datas[];
} indirectSamplerDataUbo;

layout(set = 0, binding = 2) buffer TotalIndirectDataUbo {
  TotalIndirectData datas[];
} indirectDataUbo;

layout(set = 0, binding = 3) buffer readonly MissUbo {
  MissRecord records[];
} missUbo;

layout(set = 0, binding = 4) buffer readonly LightShadeUbo {
  LightShadeRecord records[];
} lightShadeUbo;

layout(set = 0, binding = 5) buffer readonly IndirectShadeUbo {
  IndirectShadeRecord records[];
} indirectShadeUbo;

layout(set = 0, binding = 6) buffer readonly DirectShadeUbo {
  DirectShadeRecord records[];
} directShadeUbo;

void main() {
  IndirectSamplerData samplerData = indirectSamplerDataUbo.datas[gl_GlobalInvocationID.x];
  DirectShadeRecord directRecord = directShadeUbo.records[gl_GlobalInvocationID.x];
  IndirectShadeRecord indirectRecord = indirectShadeUbo.records[gl_GlobalInvocationID.x];
  LightShadeRecord lightShadeRecord = lightShadeUbo.records[gl_GlobalInvocationID.x];
  MissRecord missRecord = missUbo.records[gl_GlobalInvocationID.x];
  TotalIndirectData prevIndirectData = indirectDataUbo.datas[gl_GlobalInvocationID.x];

  ivec2 pixelCoord = ivec2(samplerData.xCoord, samplerData.yCoord);
  vec3 totalPrevIndirect = prevIndirectData.attenuation / prevIndirectData.pdf;

  vec3 curRadiance = lightShadeRecord.radiance * prevIndirectData.attenuation * lightShadeRecord.isIlluminate;
  curRadiance += missRecord.radiance * totalPrevIndirect * missRecord.isMiss;
  curRadiance += directRecord.radiance * totalPrevIndirect * directRecord.isIlluminate;

  vec3 totalRadiance = imageLoad(totalRadianceImage, pixelCoord).xyz;
  totalRadiance = mix(vec3(0.0f), totalRadiance, when_gt(lightShadeRecord.rayBounce, 0.0f));

  imageStore(totalRadianceImage, pixelCoord, vec4(totalRadiance + curRadiance, 1.0f));

  TotalIndirectData totalIndirectData;
  totalIndirectData.attenuation = mix(vec3(1.0f), totalPrevIndirect * indirectRecord.radiance, indirectRecord.isIlluminate);
  totalIndirectData.pdf = mix(1.0f, indirectRecord.pdf, indirectRecord.isIlluminate);

  indirectDataUbo.datas[gl_GlobalInvocationID.x] = totalIndirectData;

  samplerData.rayBounce = (lightShadeRecord.rayBounce + 1.0f) * indirectRecord.isIlluminate * when_lt(lightShadeRecord.rayBounce, 3.0f);
  samplerData.nextRay = indirectRecord.nextRay;
  
  indirectSamplerDataUbo.datas[gl_GlobalInvocationID.x] = samplerData;
}