#version 460

#include "core/struct.glsl"
#include "core/boolean.glsl"

layout(local_size_x = 32) in;

layout(set = 0, binding = 0, rgba8) uniform image2D resultImage;

layout(set = 0, binding = 1) buffer IndirectSamplerDataUbo {
  IndirectSamplerData datas[];
} indirectSamplerDataUbo;

layout(set = 0, binding = 2) buffer RenderResultUbo {
  RenderResult datas[];
} renderResultUbo;

layout(set = 0, binding = 3) buffer readonly MissUbo {
  MissRecord records[];
} missUbo;

layout(set = 0, binding = 4) buffer readonly LightShadeUbo {
  LightShadeRecord records[];
} lightShadeUbo;

layout(set = 0, binding = 5) buffer readonly IndirectShadeUbo {
  IndirectShadeRecord records[];
} indirectShadeUbo;

layout(set = 0, binding = 6) buffer readonly DirectShadeUbo {
  DirectShadeRecord records[];
} directShadeUbo;

void main() {
  IndirectSamplerData samplerData = indirectSamplerDataUbo.datas[gl_GlobalInvocationID.x];
  DirectShadeRecord directRecord = directShadeUbo.records[gl_GlobalInvocationID.x];
  IndirectShadeRecord indirectRecord = indirectShadeUbo.records[gl_GlobalInvocationID.x];
  LightShadeRecord lightShadeRecord = lightShadeUbo.records[gl_GlobalInvocationID.x];
  MissRecord missRecord = missUbo.records[gl_GlobalInvocationID.x];
  RenderResult prevRenderResult = renderResultUbo.datas[gl_GlobalInvocationID.x];

  ivec2 pixelCoord = ivec2(samplerData.xCoord, samplerData.yCoord);
  vec3 totalPrevIndirect = prevRenderResult.totalIndirect / prevRenderResult.pdf;

  vec3 curRadiance = lightShadeRecord.radiance * prevRenderResult.totalIndirect * when_gt(lightShadeRecord.isIlluminate, 0.9f);
  curRadiance += missRecord.radiance * totalPrevIndirect * when_gt(missRecord.isMiss, 0.9f);
  curRadiance += directRecord.radiance * totalPrevIndirect * when_gt(directRecord.isIlluminate, 0.9f);

  float totalPdf = indirectRecord.pdf + directRecord.pdf;

  vec3 totalRadiance = prevRenderResult.totalRadiance + curRadiance * directRecord.pdf / totalPdf;
  vec3 totalIndirect = totalPrevIndirect * indirectRecord.radiance * indirectRecord.pdf / totalPdf;
  float isRayContinue = when_gt(indirectRecord.isIlluminate, 0.9f) * when_lt(lightShadeRecord.rayBounce, 9.9f) * when_gt(length(totalIndirect), 0.1f);

  if (isRayContinue < 0.1f) {
    imageStore(resultImage, pixelCoord, vec4(totalRadiance, 1.0f));
  }

  RenderResult renderResult;
  renderResult.totalRadiance = mix(vec3(0.0f), totalRadiance, isRayContinue);
  renderResult.totalIndirect = mix(vec3(1.0f), totalIndirect, isRayContinue);
  renderResult.pdf = mix(1.0f, indirectRecord.pdf, isRayContinue);

  renderResultUbo.datas[gl_GlobalInvocationID.x] = renderResult;

  samplerData.rayBounce = round((lightShadeRecord.rayBounce + 1.0f) * isRayContinue);
  samplerData.nextRay = indirectRecord.nextRay;
  
  indirectSamplerDataUbo.datas[gl_GlobalInvocationID.x] = samplerData;
}