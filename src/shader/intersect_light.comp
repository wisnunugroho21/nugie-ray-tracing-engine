#version 460

#include "core/struct.glsl"
layout(local_size_x = 64) in;

layout(set = 0, binding = 0) buffer writeonly ResultUbo {
  HitRecord records[];
} resultUbo;

layout(set = 0, binding = 1) buffer readonly RayUbo {
  RayData rayDatas[];
} rayUbo;

layout(set = 0, binding = 2) buffer readonly LightSsbo {
  TriangleLight lights[];
};

layout(set = 0, binding = 3) buffer readonly LightBvhSsbo {
  BvhNode lightBvhNodes[];
};

layout(set = 0, binding = 4) buffer readonly VertexSsbo {
  Vertex vertices[];
};

#include "core/basic.glsl"
#include "trace/trace_light.glsl"

void main() {
  HitRecord hitRecord = hitTriangleLightBvh(rayUbo.rayDatas[gl_GlobalInvocationID.x].ray, rayUbo.rayDatas[gl_GlobalInvocationID.x].dirMin, rayUbo.rayDatas[gl_GlobalInvocationID.x].tMax);

  resultUbo.records[gl_GlobalInvocationID.x].isHit = hitRecord.isHit;
  resultUbo.records[gl_GlobalInvocationID.x].hitIndex = hitRecord.hitIndex;
  resultUbo.records[gl_GlobalInvocationID.x].point = hitRecord.point;
  resultUbo.records[gl_GlobalInvocationID.x].t = hitRecord.t;
  resultUbo.records[gl_GlobalInvocationID.x].normal = hitRecord.normal;
}